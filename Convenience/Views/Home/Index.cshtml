@using Convenience.Models.DataModels
@model Convenience.Models.Menu

@{
    ViewData["Title"] = "Menu Page";
    string? previousClass = null; // 前回のクラスを記録する変数
    bool isFirstRow = true; // 初回の行かどうかを記録

    //メニューリストの作成（親メニューと子メニューをフラットに設定）
    var list = Model.MenuList.SelectMany(
            parent => parent.ChildrenMenus?.DefaultIfEmpty()??Enumerable.Empty<MenuItem>(),
            (parent, child) => new { Parent = parent, Child = child });
}

<div class="row d-flex flex-wrap">  <!-- Flexbox を使って横並びにし、折り返し可能に -->
    @foreach (var menuItem2 in list){

        string pName = menuItem2.Parent.Name;
        MenuItem menuItem = menuItem2.Child ?? menuItem2.Parent;

        //1文字目が"/"じゃなかった時の措置
        menuItem.Url = menuItem.Url.StartsWith("/") ? menuItem.Url : "/" + menuItem.Url;

        // 条件に応じてカスタムクラスを切り替え
        var cardClass = "card "; // デフォルトのクラス
        cardClass += pName switch
        {
            "マスターメニュー"    => "bg-master",       // マスタ: 薄い黄色
            "検索メニュー"        => "bg-performance",  // 実績: 薄い緑
            "ホーム"              => "bg-home",         // ホーム: 薄い青
            _                     => "bg-other"         // その他: 薄い灰色
        };

        // 色が変わるたびに行を閉じて新しい行を開始
        if (!isFirstRow && previousClass != null && previousClass != cardClass)
        {
            @:</div><div class="row d-flex flex-wrap"> <!-- 行を閉じて新しい行を開始 -->
        }
        previousClass = cardClass; // 現在のクラスを記録
        isFirstRow = false; // 初回チェックを無効化

        <div class="col-md-2 col-sm-6 col-12 d-flex" style="margin-bottom: 10px;"> <!-- 少し小さめのマージン -->
            <div class="@cardClass d-flex flex-column" style="height: 100%; width: 100%;">
                <div class="card-body d-flex flex-column" style="flex-grow: 1;">
                    <h5 class="card-title">@menuItem.Name</h5>
                    <p class="card-text">@menuItem.Description</p>
                    <a href="@menuItem.Url" class="btn btn-primary mt-auto">@menuItem.Name</a>
                </div>
            </div>
        </div>
    }
</div>




@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}